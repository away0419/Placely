-- ============================================================================
-- Placely 프로젝트 Oracle DB 전체 테이블 생성 스크립트 (코멘트 포함 버전) - Part 3
-- ============================================================================

-- 판매 예측 데이터 테이블
CREATE TABLE AI_SALES_PREDICTIONS (
    PREDICTION_ID   NUMBER          PRIMARY KEY,
    STORE_ID        NUMBER          NOT NULL,
    PRODUCT_ID      NUMBER          NOT NULL,
    PREDICTION_DATE DATE            NOT NULL,
    PREDICTED_QUANTITY NUMBER(10,2),
    PREDICTED_AMOUNT   NUMBER(12,2),
    CONFIDENCE_LEVEL   NUMBER(5,2),
    MODEL_VERSION      VARCHAR2(20),
    FACTORS            CLOB,
    ACTUAL_QUANTITY    NUMBER(10,2),
    ACTUAL_AMOUNT      NUMBER(12,2),
    CREATED_AT         TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT         TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (STORE_ID, PRODUCT_ID, PREDICTION_DATE),
    FOREIGN KEY (STORE_ID) REFERENCES POS_STORES(STORE_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES POS_PRODUCTS(PRODUCT_ID)
);

-- 컬럼 코멘트 추가
COMMENT ON COLUMN AI_SALES_PREDICTIONS.PREDICTION_ID IS '예측 ID (Primary Key)';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.STORE_ID IS '매장 ID (Foreign Key: POS_STORES.STORE_ID)';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.PRODUCT_ID IS '상품 ID (Foreign Key: POS_PRODUCTS.PRODUCT_ID)';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.PREDICTION_DATE IS '예측 날짜';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.PREDICTED_QUANTITY IS '예측 판매량';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.PREDICTED_AMOUNT IS '예측 판매금액';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.CONFIDENCE_LEVEL IS '신뢰도 (0-100)';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.MODEL_VERSION IS '모델 버전';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.FACTORS IS '예측 요인 (JSON 형태)';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.ACTUAL_QUANTITY IS '실제 판매량';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.ACTUAL_AMOUNT IS '실제 판매금액';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.CREATED_AT IS '생성 시간';
COMMENT ON COLUMN AI_SALES_PREDICTIONS.UPDATED_AT IS '수정 시간';

-- 고객 세그먼트 테이블
CREATE TABLE AI_CUSTOMER_SEGMENTS (
    SEGMENT_ID      NUMBER          PRIMARY KEY,
    SEGMENT_NAME    VARCHAR2(100)   NOT NULL,
    DESCRIPTION     VARCHAR2(500),
    CRITERIA        CLOB,
    IS_ACTIVE       CHAR(1)         DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_AT      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY      NUMBER,
    UPDATED_AT      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY      NUMBER,
    IS_DELETED      CHAR(1)         DEFAULT 'N' CHECK (IS_DELETED IN ('Y', 'N')),
    DELETED_AT      TIMESTAMP,
    DELETED_BY      NUMBER,
    FOREIGN KEY (CREATED_BY) REFERENCES AUTH_USERS(USER_ID),
    FOREIGN KEY (UPDATED_BY) REFERENCES AUTH_USERS(USER_ID),
    FOREIGN KEY (DELETED_BY) REFERENCES AUTH_USERS(USER_ID)
);

-- 컬럼 코멘트 추가
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.SEGMENT_ID IS '세그먼트 ID (Primary Key)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.SEGMENT_NAME IS '세그먼트명';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.DESCRIPTION IS '세그먼트 설명';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.CRITERIA IS '세그먼트 기준 (JSON 형태)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.IS_ACTIVE IS '활성화 여부 (Y:활성, N:비활성)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.CREATED_AT IS '생성 시간';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.CREATED_BY IS '생성자 ID (Foreign Key: AUTH_USERS.USER_ID)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.UPDATED_AT IS '수정 시간';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.UPDATED_BY IS '수정자 ID (Foreign Key: AUTH_USERS.USER_ID)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.IS_DELETED IS '삭제 여부 (Y:삭제, N:미삭제)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.DELETED_AT IS '삭제 시간';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENTS.DELETED_BY IS '삭제자 ID (Foreign Key: AUTH_USERS.USER_ID)';

-- 고객-세그먼트 매핑 테이블
CREATE TABLE AI_CUSTOMER_SEGMENT_MAPPING (
    MAPPING_ID      NUMBER          PRIMARY KEY,
    CUSTOMER_ID     NUMBER          NOT NULL,
    SEGMENT_ID      NUMBER          NOT NULL,
    ASSIGNED_AT     TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    CONFIDENCE      NUMBER(5,2),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES AUTH_USERS(USER_ID),
    FOREIGN KEY (SEGMENT_ID) REFERENCES AI_CUSTOMER_SEGMENTS(SEGMENT_ID)
);

-- 컬럼 코멘트 추가
COMMENT ON COLUMN AI_CUSTOMER_SEGMENT_MAPPING.MAPPING_ID IS '매핑 ID (Primary Key)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENT_MAPPING.CUSTOMER_ID IS '고객 ID (Foreign Key: AUTH_USERS.USER_ID)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENT_MAPPING.SEGMENT_ID IS '세그먼트 ID (Foreign Key: AI_CUSTOMER_SEGMENTS.SEGMENT_ID)';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENT_MAPPING.ASSIGNED_AT IS '할당 시간';
COMMENT ON COLUMN AI_CUSTOMER_SEGMENT_MAPPING.CONFIDENCE IS '소속 확신도 (0-100)';

-- 상품 연관 분석 테이블
CREATE TABLE AI_PRODUCT_ASSOCIATIONS (
    ASSOCIATION_ID  NUMBER          PRIMARY KEY,
    PRODUCT_A_ID    NUMBER          NOT NULL,
    PRODUCT_B_ID    NUMBER          NOT NULL,
    SUPPORT         NUMBER(8,6),
    CONFIDENCE      NUMBER(8,6),
    LIFT           NUMBER(8,6),
    ANALYSIS_DATE   DATE            NOT NULL,
    MIN_SUPPORT     NUMBER(8,6),
    MIN_CONFIDENCE  NUMBER(8,6),
    TRANSACTION_COUNT NUMBER,
    CREATED_AT      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (PRODUCT_A_ID, PRODUCT_B_ID, ANALYSIS_DATE),
    FOREIGN KEY (PRODUCT_A_ID) REFERENCES POS_PRODUCTS(PRODUCT_ID),
    FOREIGN KEY (PRODUCT_B_ID) REFERENCES POS_PRODUCTS(PRODUCT_ID)
);

-- 컬럼 코멘트 추가
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.ASSOCIATION_ID IS '연관 분석 ID (Primary Key)';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.PRODUCT_A_ID IS '상품 A ID (Foreign Key: POS_PRODUCTS.PRODUCT_ID)';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.PRODUCT_B_ID IS '상품 B ID (Foreign Key: POS_PRODUCTS.PRODUCT_ID)';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.SUPPORT IS '지지도';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.CONFIDENCE IS '신뢰도';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.LIFT IS '향상도';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.ANALYSIS_DATE IS '분석 날짜';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.MIN_SUPPORT IS '최소 지지도';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.MIN_CONFIDENCE IS '최소 신뢰도';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.TRANSACTION_COUNT IS '거래 건수';
COMMENT ON COLUMN AI_PRODUCT_ASSOCIATIONS.CREATED_AT IS '생성 시간';

-- AI 모델 성능 추적 테이블
CREATE TABLE AI_MODEL_PERFORMANCE (
    PERFORMANCE_ID  NUMBER          PRIMARY KEY,
    MODEL_NAME      VARCHAR2(100)   NOT NULL,
    MODEL_VERSION   VARCHAR2(20)    NOT NULL,
    METRIC_NAME     VARCHAR2(50)    NOT NULL,
    METRIC_VALUE    NUMBER(10,6),
    TEST_DATA_SIZE  NUMBER,
    EVALUATION_DATE TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    NOTES           VARCHAR2(500)
);

-- 컬럼 코멘트 추가
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.PERFORMANCE_ID IS '성능 ID (Primary Key)';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.MODEL_NAME IS '모델명';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.MODEL_VERSION IS '모델 버전';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.METRIC_NAME IS '메트릭명 (ACCURACY, PRECISION, RECALL, F1_SCORE 등)';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.METRIC_VALUE IS '메트릭 값';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.TEST_DATA_SIZE IS '테스트 데이터 크기';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.EVALUATION_DATE IS '평가 날짜';
COMMENT ON COLUMN AI_MODEL_PERFORMANCE.NOTES IS '메모';

-- 실시간 추천 캐시 테이블
CREATE TABLE AI_RECOMMENDATION_CACHE (
    CACHE_ID        NUMBER          PRIMARY KEY,
    CACHE_KEY       VARCHAR2(200)   UNIQUE NOT NULL,
    RECOMMENDATIONS CLOB,
    EXPIRES_AT      TIMESTAMP       NOT NULL,
    HIT_COUNT       NUMBER          DEFAULT 0,
    CREATED_AT      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP
);

-- 컬럼 코멘트 추가
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.CACHE_ID IS '캐시 ID (Primary Key)';
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.CACHE_KEY IS '캐시 키 (고객ID_매장ID_타입 등 조합)';
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.RECOMMENDATIONS IS '추천 목록 (JSON 형태)';
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.EXPIRES_AT IS '만료 시간';
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.HIT_COUNT IS '히트 카운트';
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.CREATED_AT IS '생성 시간';
COMMENT ON COLUMN AI_RECOMMENDATION_CACHE.UPDATED_AT IS '수정 시간';

-- ============================================================================
-- 시퀀스 생성
-- ============================================================================

-- Auth 서비스 시퀀스
CREATE SEQUENCE SEQ_AUTH_USERS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AUTH_ROLES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AUTH_PERMISSIONS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AUTH_TOKENS START WITH 1 INCREMENT BY 1;

-- POS 서비스 시퀀스
CREATE SEQUENCE SEQ_POS_STORES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_STORE_USER_ROLES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_CATEGORIES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_OPTION_GROUPS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_OPTION_ITEMS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_PRODUCTS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_PRODUCT_OPTIONS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_INVENTORY START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_SALES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_SALE_ITEMS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_SALE_ITEM_OPTIONS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_PAYMENTS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_POS_INVENTORY_MOVEMENTS START WITH 1 INCREMENT BY 1;

-- AI 서비스 시퀀스
CREATE SEQUENCE SEQ_AI_CUSTOMER_BEHAVIOR START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_RECOMMENDATIONS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_SALES_PREDICTIONS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_CUSTOMER_SEGMENTS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_CUSTOMER_SEGMENT_MAPPING START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_PRODUCT_ASSOCIATIONS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_MODEL_PERFORMANCE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AI_RECOMMENDATION_CACHE START WITH 1 INCREMENT BY 1;

-- ============================================================================
-- 인덱스 생성
-- ============================================================================

-- Auth 서비스 인덱스
CREATE INDEX IDX_AUTH_USERS_EMAIL ON AUTH_USERS(EMAIL);
CREATE INDEX IDX_AUTH_USERS_USERNAME ON AUTH_USERS(USERNAME);
CREATE INDEX IDX_AUTH_USERS_STATUS ON AUTH_USERS(STATUS);
CREATE INDEX IDX_AUTH_TOKENS_USER_ID ON AUTH_TOKENS(USER_ID);
CREATE INDEX IDX_AUTH_TOKENS_EXPIRES ON AUTH_TOKENS(EXPIRES_AT);
CREATE INDEX IDX_AUTH_TOKENS_TYPE ON AUTH_TOKENS(TOKEN_TYPE);

-- POS 서비스 인덱스
CREATE INDEX IDX_POS_STORES_USER_ID ON POS_STORES(USER_ID);
CREATE INDEX IDX_POS_STORES_CODE ON POS_STORES(STORE_CODE);
CREATE INDEX IDX_POS_STORES_STATUS ON POS_STORES(STATUS);
CREATE INDEX IDX_POS_PRODUCTS_STORE_ID ON POS_PRODUCTS(STORE_ID);
CREATE INDEX IDX_POS_PRODUCTS_CODE ON POS_PRODUCTS(PRODUCT_CODE);
CREATE INDEX IDX_POS_PRODUCTS_BARCODE ON POS_PRODUCTS(BARCODE);
CREATE INDEX IDX_POS_PRODUCTS_CATEGORY ON POS_PRODUCTS(CATEGORY_ID);
CREATE INDEX IDX_POS_PRODUCTS_ACTIVE ON POS_PRODUCTS(IS_ACTIVE);
CREATE INDEX IDX_POS_SALES_STORE_ID ON POS_SALES(STORE_ID);
CREATE INDEX IDX_POS_SALES_DATE ON POS_SALES(SALE_DATE);
CREATE INDEX IDX_POS_SALES_STORE_DATE ON POS_SALES(STORE_ID, SALE_DATE);
CREATE INDEX IDX_POS_SALES_CASHIER ON POS_SALES(CASHIER_ID);
CREATE INDEX IDX_POS_SALES_STATUS ON POS_SALES(STATUS);
CREATE INDEX IDX_POS_SALE_ITEMS_SALE_ID ON POS_SALE_ITEMS(SALE_ID);
CREATE INDEX IDX_POS_SALE_ITEMS_PRODUCT_ID ON POS_SALE_ITEMS(PRODUCT_ID);
CREATE INDEX IDX_POS_INVENTORY_STORE_PRODUCT ON POS_INVENTORY(STORE_ID, PRODUCT_ID);
CREATE INDEX IDX_POS_INVENTORY_STORE_ID ON POS_INVENTORY(STORE_ID);
CREATE INDEX IDX_POS_INVENTORY_PRODUCT_ID ON POS_INVENTORY(PRODUCT_ID);
CREATE INDEX IDX_POS_STORE_USER_ROLES_STORE_USER ON POS_STORE_USER_ROLES(STORE_ID, USER_ID);
CREATE INDEX IDX_POS_STORE_USER_ROLES_USER ON POS_STORE_USER_ROLES(USER_ID);
CREATE INDEX IDX_POS_STORE_USER_ROLES_EXPIRES ON POS_STORE_USER_ROLES(EXPIRES_AT);
CREATE INDEX IDX_POS_STORE_USER_ROLES_STATUS ON POS_STORE_USER_ROLES(STATUS);
CREATE INDEX IDX_POS_PAYMENTS_SALE_ID ON POS_PAYMENTS(SALE_ID);
CREATE INDEX IDX_POS_PAYMENTS_DATE ON POS_PAYMENTS(PAYMENT_DATE);
CREATE INDEX IDX_POS_PAYMENTS_METHOD ON POS_PAYMENTS(PAYMENT_METHOD);
CREATE INDEX IDX_POS_MOVEMENTS_STORE_PRODUCT ON POS_INVENTORY_MOVEMENTS(STORE_ID, PRODUCT_ID);
CREATE INDEX IDX_POS_MOVEMENTS_DATE ON POS_INVENTORY_MOVEMENTS(MOVEMENT_DATE);
CREATE INDEX IDX_POS_MOVEMENTS_TYPE ON POS_INVENTORY_MOVEMENTS(MOVEMENT_TYPE);

-- AI 서비스 인덱스
CREATE INDEX IDX_AI_BEHAVIOR_STORE_TIME ON AI_CUSTOMER_BEHAVIOR(STORE_ID, VISIT_TIME);
CREATE INDEX IDX_AI_BEHAVIOR_STORE_ID ON AI_CUSTOMER_BEHAVIOR(STORE_ID);
CREATE INDEX IDX_AI_BEHAVIOR_TIME ON AI_CUSTOMER_BEHAVIOR(VISIT_TIME);
CREATE INDEX IDX_AI_BEHAVIOR_TYPE ON AI_CUSTOMER_BEHAVIOR(BEHAVIOR_TYPE);
CREATE INDEX IDX_AI_BEHAVIOR_CUSTOMER_TYPE ON AI_CUSTOMER_BEHAVIOR(CUSTOMER_TYPE);
CREATE INDEX IDX_AI_RECOMMENDATIONS_STORE_PRODUCT ON AI_RECOMMENDATIONS(STORE_ID, PRODUCT_ID);
CREATE INDEX IDX_AI_RECOMMENDATIONS_STORE_ID ON AI_RECOMMENDATIONS(STORE_ID);
CREATE INDEX IDX_AI_RECOMMENDATIONS_PRODUCT_ID ON AI_RECOMMENDATIONS(PRODUCT_ID);
CREATE INDEX IDX_AI_RECOMMENDATIONS_CUSTOMER_ID ON AI_RECOMMENDATIONS(CUSTOMER_ID);
CREATE INDEX IDX_AI_RECOMMENDATIONS_TYPE ON AI_RECOMMENDATIONS(RECOMMENDATION_TYPE);
CREATE INDEX IDX_AI_RECOMMENDATIONS_TIME ON AI_RECOMMENDATIONS(RECOMMENDED_AT);
CREATE INDEX IDX_AI_PREDICTIONS_STORE_PRODUCT ON AI_SALES_PREDICTIONS(STORE_ID, PRODUCT_ID);
CREATE INDEX IDX_AI_PREDICTIONS_DATE ON AI_SALES_PREDICTIONS(PREDICTION_DATE);
CREATE INDEX IDX_AI_PREDICTIONS_STORE_ID ON AI_SALES_PREDICTIONS(STORE_ID);
CREATE INDEX IDX_AI_PREDICTIONS_PRODUCT_ID ON AI_SALES_PREDICTIONS(PRODUCT_ID);
CREATE INDEX IDX_AI_SEGMENTS_ACTIVE ON AI_CUSTOMER_SEGMENTS(IS_ACTIVE);
CREATE INDEX IDX_AI_SEGMENTS_NAME ON AI_CUSTOMER_SEGMENTS(SEGMENT_NAME);
CREATE INDEX IDX_AI_SEGMENT_MAPPING_CUSTOMER ON AI_CUSTOMER_SEGMENT_MAPPING(CUSTOMER_ID);
CREATE INDEX IDX_AI_SEGMENT_MAPPING_SEGMENT ON AI_CUSTOMER_SEGMENT_MAPPING(SEGMENT_ID);
CREATE INDEX IDX_AI_ASSOCIATIONS_PRODUCT_A ON AI_PRODUCT_ASSOCIATIONS(PRODUCT_A_ID);
CREATE INDEX IDX_AI_ASSOCIATIONS_PRODUCT_B ON AI_PRODUCT_ASSOCIATIONS(PRODUCT_B_ID);
CREATE INDEX IDX_AI_ASSOCIATIONS_DATE ON AI_PRODUCT_ASSOCIATIONS(ANALYSIS_DATE);
CREATE INDEX IDX_AI_MODEL_PERFORMANCE_MODEL ON AI_MODEL_PERFORMANCE(MODEL_NAME, MODEL_VERSION);
CREATE INDEX IDX_AI_MODEL_PERFORMANCE_DATE ON AI_MODEL_PERFORMANCE(EVALUATION_DATE);
CREATE INDEX IDX_AI_CACHE_EXPIRES ON AI_RECOMMENDATION_CACHE(EXPIRES_AT);
CREATE INDEX IDX_AI_CACHE_KEY ON AI_RECOMMENDATION_CACHE(CACHE_KEY);

-- ============================================================================
-- 기본 데이터 삽입
-- ============================================================================

-- Auth 서비스 기본 데이터
INSERT INTO AUTH_ROLES (ROLE_ID, ROLE_NAME, DESCRIPTION) VALUES (SEQ_AUTH_ROLES.NEXTVAL, 'ADMIN', '시스템 관리자');
INSERT INTO AUTH_ROLES (ROLE_ID, ROLE_NAME, DESCRIPTION) VALUES (SEQ_AUTH_ROLES.NEXTVAL, 'OWNER', '매장 점주');
INSERT INTO AUTH_ROLES (ROLE_ID, ROLE_NAME, DESCRIPTION) VALUES (SEQ_AUTH_ROLES.NEXTVAL, 'MANAGER', '매장 관리자');
INSERT INTO AUTH_ROLES (ROLE_ID, ROLE_NAME, DESCRIPTION) VALUES (SEQ_AUTH_ROLES.NEXTVAL, 'CASHIER', '계산원');
INSERT INTO AUTH_ROLES (ROLE_ID, ROLE_NAME, DESCRIPTION) VALUES (SEQ_AUTH_ROLES.NEXTVAL, 'USER', '일반 사용자');

INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'USER_READ', 'USER', 'READ', '사용자 조회');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'USER_WRITE', 'USER', 'WRITE', '사용자 생성/수정');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'PRODUCT_READ', 'PRODUCT', 'READ', '상품 조회');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'PRODUCT_WRITE', 'PRODUCT', 'WRITE', '상품 생성/수정');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'SALES_READ', 'SALES', 'READ', '판매 조회');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'SALES_WRITE', 'SALES', 'WRITE', '판매 처리');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'INVENTORY_READ', 'INVENTORY', 'READ', '재고 조회');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'INVENTORY_WRITE', 'INVENTORY', 'WRITE', '재고 관리');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'STORE_READ', 'STORE', 'READ', '매장 조회');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'STORE_WRITE', 'STORE', 'WRITE', '매장 관리');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'AI_READ', 'AI', 'READ', 'AI 분석 조회');
INSERT INTO AUTH_PERMISSIONS (PERMISSION_ID, PERMISSION_NAME, RESOURCE_TYPE, ACTION_TYPE, DESCRIPTION) VALUES (SEQ_AUTH_PERMISSIONS.NEXTVAL, 'AI_WRITE', 'AI', 'WRITE', 'AI 분석 관리');

-- POS 서비스 기본 데이터
INSERT INTO POS_CATEGORIES (CATEGORY_ID, CATEGORY_NAME, DISPLAY_ORDER) VALUES (SEQ_POS_CATEGORIES.NEXTVAL, '음료', 1);
INSERT INTO POS_CATEGORIES (CATEGORY_ID, CATEGORY_NAME, DISPLAY_ORDER) VALUES (SEQ_POS_CATEGORIES.NEXTVAL, '디저트', 2);
INSERT INTO POS_CATEGORIES (CATEGORY_ID, CATEGORY_NAME, DISPLAY_ORDER) VALUES (SEQ_POS_CATEGORIES.NEXTVAL, '간식', 3);
INSERT INTO POS_CATEGORIES (CATEGORY_ID, CATEGORY_NAME, DISPLAY_ORDER) VALUES (SEQ_POS_CATEGORIES.NEXTVAL, '식사', 4);
INSERT INTO POS_CATEGORIES (CATEGORY_ID, CATEGORY_NAME, DISPLAY_ORDER) VALUES (SEQ_POS_CATEGORIES.NEXTVAL, '기타', 5);

INSERT INTO POS_OPTION_GROUPS (OPTION_GROUP_ID, GROUP_NAME, DESCRIPTION) VALUES (SEQ_POS_OPTION_GROUPS.NEXTVAL, '사이즈', '음료 사이즈 선택');
INSERT INTO POS_OPTION_GROUPS (OPTION_GROUP_ID, GROUP_NAME, DESCRIPTION) VALUES (SEQ_POS_OPTION_GROUPS.NEXTVAL, '온도', '음료 온도 선택');
INSERT INTO POS_OPTION_GROUPS (OPTION_GROUP_ID, GROUP_NAME, DESCRIPTION) VALUES (SEQ_POS_OPTION_GROUPS.NEXTVAL, '시럽', '추가 시럽 선택');
INSERT INTO POS_OPTION_GROUPS (OPTION_GROUP_ID, GROUP_NAME, DESCRIPTION) VALUES (SEQ_POS_OPTION_GROUPS.NEXTVAL, '토핑', '추가 토핑 선택');

INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '사이즈'), 'S');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '사이즈'), 'M');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '사이즈'), 'L');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '온도'), '아이스');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '온도'), '핫');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '시럽'), '바닐라시럽');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '시럽'), '카라멜시럽');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '토핑'), '휘핑크림');
INSERT INTO POS_OPTION_ITEMS (OPTION_ITEM_ID, OPTION_GROUP_ID, ITEM_NAME) VALUES (SEQ_POS_OPTION_ITEMS.NEXTVAL, (SELECT OPTION_GROUP_ID FROM POS_OPTION_GROUPS WHERE GROUP_NAME = '토핑'), '초콜릿칩');

-- AI 서비스 기본 데이터
INSERT INTO AI_CUSTOMER_SEGMENTS (SEGMENT_ID, SEGMENT_NAME, DESCRIPTION, CRITERIA) VALUES (SEQ_AI_CUSTOMER_SEGMENTS.NEXTVAL, 'VIP 고객', '월 구매액 50만원 이상', '{"monthly_amount": {"min": 500000}}');
INSERT INTO AI_CUSTOMER_SEGMENTS (SEGMENT_ID, SEGMENT_NAME, DESCRIPTION, CRITERIA) VALUES (SEQ_AI_CUSTOMER_SEGMENTS.NEXTVAL, '단골 고객', '월 3회 이상 방문', '{"monthly_visits": {"min": 3}}');
INSERT INTO AI_CUSTOMER_SEGMENTS (SEGMENT_ID, SEGMENT_NAME, DESCRIPTION, CRITERIA) VALUES (SEQ_AI_CUSTOMER_SEGMENTS.NEXTVAL, '신규 고객', '첫 방문 후 1개월 이내', '{"days_since_first_visit": {"max": 30}}');
INSERT INTO AI_CUSTOMER_SEGMENTS (SEGMENT_ID, SEGMENT_NAME, DESCRIPTION, CRITERIA) VALUES (SEQ_AI_CUSTOMER_SEGMENTS.NEXTVAL, '이탈 위험 고객', '최근 30일간 방문 없음', '{"days_since_last_visit": {"min": 30}}');
INSERT INTO AI_CUSTOMER_SEGMENTS (SEGMENT_ID, SEGMENT_NAME, DESCRIPTION, CRITERIA) VALUES (SEQ_AI_CUSTOMER_SEGMENTS.NEXTVAL, '휴면 고객', '최근 3개월간 방문 없음', '{"days_since_last_visit": {"min": 90}}');
INSERT INTO AI_CUSTOMER_SEGMENTS (SEGMENT_ID, SEGMENT_NAME, DESCRIPTION, CRITERIA) VALUES (SEQ_AI_CUSTOMER_SEGMENTS.NEXTVAL, '높은 가치 고객', '평균 구매액 상위 20%', '{"purchase_amount_percentile": {"min": 80}}');

COMMIT;

-- ============================================================================
-- 테이블 생성 완료 메시지
-- ============================================================================

SELECT 'Placely 데이터베이스 테이블 생성이 완료되었습니다! (코멘트 포함)' AS MESSAGE FROM DUAL;

-- 생성된 테이블 확인
SELECT 'Auth 서비스 테이블' AS SERVICE, COUNT(*) AS TABLE_COUNT 
FROM USER_TABLES WHERE TABLE_NAME LIKE 'AUTH_%'
UNION ALL
SELECT 'POS 서비스 테이블' AS SERVICE, COUNT(*) AS TABLE_COUNT 
FROM USER_TABLES WHERE TABLE_NAME LIKE 'POS_%'
UNION ALL
SELECT 'AI 서비스 테이블' AS SERVICE, COUNT(*) AS TABLE_COUNT 
FROM USER_TABLES WHERE TABLE_NAME LIKE 'AI_%';

-- 시퀀스 확인
SELECT 'SEQ' AS OBJECT_TYPE, COUNT(*) AS OBJECT_COUNT 
FROM USER_SEQUENCES 
WHERE SEQUENCE_NAME LIKE 'SEQ_%';

-- 인덱스 확인
SELECT 'INDEX' AS OBJECT_TYPE, COUNT(*) AS OBJECT_COUNT 
FROM USER_INDEXES 
WHERE INDEX_NAME LIKE 'IDX_%';

-- 코멘트 확인
SELECT 'COMMENT' AS OBJECT_TYPE, COUNT(*) AS OBJECT_COUNT 
FROM USER_COL_COMMENTS 
WHERE COMMENTS IS NOT NULL;

-- ============================================================================
-- 실행 완료
-- ============================================================================ 